{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/italo/\\xC1rea de Trabalho/cursos/nlw#5/podcasternext/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nexport var PlayerContext = /*#__PURE__*/createContext({}); //defini o tipo de dados que o contexto irá usar\n\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlayer() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setIsPlayerState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n  var hasPrevious = currentEpisodeIndex > 0;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      isPlaying: isPlaying,\n      togglePlayer: togglePlayer,\n      setIsPlayerState: setIsPlayerState,\n      playPrevious: playPrevious,\n      playNext: playNext,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"LrQXJ4YCuKXOoMsmvRtpeyylJ9U=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/italo/Área de Trabalho/cursos/nlw#5/podcasternext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","playList","list","index","togglePlayer","setIsPlayerState","state","hasNext","length","hasPrevious","playNext","playPrevious"],"mappings":";;;;;AACA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AA0BA,OAAO,IAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC,C,CAA8D;;AAErE,OAAO,SAASG,qBAAT,OAEwB;AAAA;;AAAA,MAD7BC,QAC6B,QAD7BA,QAC6B;;AAAA,kBACSH,QAAQ,CAAC,EAAD,CADjB;AAAA,MACtBI,WADsB;AAAA,MACTC,cADS;;AAAA,mBAEyBL,QAAQ,CAAC,CAAD,CAFjC;AAAA,MAEtBM,mBAFsB;AAAA,MAEDC,sBAFC;;AAAA,mBAGKP,QAAQ,CAAC,KAAD,CAHb;AAAA,MAGtBQ,SAHsB;AAAA,MAGXC,YAHW;;AAK7B,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AACD,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASM,YAAT,GAAwB;AACtBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASQ,gBAAT,CAA0BC,KAA1B,EAA0C;AACxCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD;;AACD,MAAMC,OAAO,GAAGZ,mBAAmB,GAAG,CAAtB,GAA0BF,WAAW,CAACe,MAAtD;AACA,MAAMC,WAAW,GAAGd,mBAAmB,GAAG,CAA1C;;AAEA,WAASe,QAAT,GAAoB;AAClB,QAAIH,OAAJ,EAAa;AACXX,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,WAASgB,YAAT,GAAwB;AACtB,QAAIF,WAAJ,EAAiB;AACfb,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,WAAW,EAAXA,WADK;AAELE,MAAAA,mBAAmB,EAAnBA,mBAFK;AAGLI,MAAAA,IAAI,EAAJA,IAHK;AAILE,MAAAA,QAAQ,EAARA,QAJK;AAKLJ,MAAAA,SAAS,EAATA,SALK;AAMLO,MAAAA,YAAY,EAAZA,YANK;AAOLC,MAAAA,gBAAgB,EAAhBA,gBAPK;AAQLM,MAAAA,YAAY,EAAZA,YARK;AASLD,MAAAA,QAAQ,EAARA,QATK;AAULH,MAAAA,OAAO,EAAPA,OAVK;AAWLE,MAAAA,WAAW,EAAXA;AAXK,KADT;AAAA,cAeGjB;AAfH;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA3DeD,qB;;KAAAA,qB","sourcesContent":["import { title } from \"node:process\";\nimport { createContext, useState, ReactNode } from \"react\";\n\ninterface Episode {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n}\n\ninterface PlayerContextData {\n  episodeList: Episode[];\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  togglePlayer: () => void;\n  play: (episode: Episode) => void;\n  setIsPlayerState: (state: boolean) => void;\n  playList: (list: Episode[], index: number) => void;\n  playPrevious: () => void;\n  playNext: () => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\ninterface playerContextProviderProps {\n  children: ReactNode;\n}\nexport const PlayerContext = createContext({} as PlayerContextData); //defini o tipo de dados que o contexto irá usar\n\nexport function PlayerContextProvider({\n  children,\n}: playerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlayer() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setIsPlayerState(state: boolean) {\n    setIsPlaying(state);\n  }\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n  const hasPrevious = currentEpisodeIndex > 0;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        playList,\n        isPlaying,\n        togglePlayer,\n        setIsPlayerState,\n        playPrevious,\n        playNext,\n        hasNext,\n        hasPrevious,\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}