{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/italo/\\xC1rea de Trabalho/cursos/nlw#5/podcasternext/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState, useContext } from \"react\";\nexport const PlayerContext = /*#__PURE__*/createContext({}); //defini o tipo de dados que o contexto irá usar\n\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffle,\n    1: setIsShuffle\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlayer() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    currentEpisodeIndex = 0;\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffle(!isShuffle);\n  }\n\n  function setIsPlayerState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasNext = isShuffle || currentEpisodeIndex + 1 < episodeList.length;\n  const hasPrevious = currentEpisodeIndex > 0;\n\n  function playNext() {\n    if (isShuffle) {\n      const nextEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      isPlaying,\n      togglePlayer,\n      setIsPlayerState,\n      playPrevious,\n      playNext,\n      hasNext,\n      hasPrevious,\n      toggleLoop,\n      isLooping,\n      isShuffle,\n      toggleShuffle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\nexport const usePlayer = () => useContext(PlayerContext);","map":{"version":3,"sources":["/home/italo/Área de Trabalho/cursos/nlw#5/podcasternext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffle","setIsShuffle","play","episode","playList","list","index","togglePlayer","clearPlayerState","toggleLoop","toggleShuffle","setIsPlayerState","state","hasNext","length","hasPrevious","playNext","nextEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { title } from \"node:process\";\nimport { createContext, useState, ReactNode, useContext } from \"react\";\n\ninterface Episode {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n}\n\ninterface PlayerContextData {\n  episodeList: Episode[];\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  isShuffle: boolean;\n  hasNext: boolean;\n  hasPrevious: boolean;\n  play: (episode: Episode) => void;\n  setIsPlayerState: (state: boolean) => void;\n  playList: (list: Episode[], index: number) => void;\n  playPrevious: () => void;\n  playNext: () => void;\n  togglePlayer: () => void;\n  toggleShuffle: () => void;\n  toggleLoop: () => void;\n}\ninterface playerContextProviderProps {\n  children: ReactNode;\n}\nexport const PlayerContext = createContext({} as PlayerContextData); //defini o tipo de dados que o contexto irá usar\n\nexport function PlayerContextProvider({\n  children,\n}: playerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffle, setIsShuffle] = useState(false);\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlayer() {\n    setIsPlaying(!isPlaying);\n  }\n  function clearPlayerState() {\n    setEpisodeList([]);\n    currentEpisodeIndex = 0;\n  }\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffle(!isShuffle);\n  }\n\n  function setIsPlayerState(state: boolean) {\n    setIsPlaying(state);\n  }\n  const hasNext = isShuffle || currentEpisodeIndex + 1 < episodeList.length;\n  const hasPrevious = currentEpisodeIndex > 0;\n\n  function playNext() {\n    if (isShuffle) {\n      const nextEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n\n      setCurrentEpisodeIndex(nextEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        playList,\n        isPlaying,\n        togglePlayer,\n        setIsPlayerState,\n        playPrevious,\n        playNext,\n        hasNext,\n        hasPrevious,\n        toggleLoop,\n        isLooping,\n        isShuffle,\n        toggleShuffle,\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n}\n\nexport const usePlayer = () => useContext(PlayerContext);\n"]},"metadata":{},"sourceType":"module"}