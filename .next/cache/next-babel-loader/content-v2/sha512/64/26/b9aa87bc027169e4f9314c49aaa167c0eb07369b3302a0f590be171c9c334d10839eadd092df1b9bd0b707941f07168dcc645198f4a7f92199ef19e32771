{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/italo/\\xC1rea de Trabalho/cursos/nlw#5/podcasternext/src/pages/index.tsx\";\nimport { format, parseISO } from \"date-fns\";\nimport ptBR from \"date-fns/locale/pt-BR\";\nimport { api } from \"../services\";\nexport default function Home(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(props.episodes)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\nexport const getStaticProps = async () => {\n  const {\n    data\n  } = await api.get(\"episodes\", {\n    params: {\n      _limit: 12,\n      _sort: \"published_at\",\n      _order: \"desc\"\n    }\n  });\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      thumbnail: episode.thumbnail,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), \"d MMM yy\", {\n        locale: ptBR\n      }),\n      duration: Number(episode.file.duration),\n      description: episode.description\n    };\n  }); // const data = await response.json();\n\n  return {\n    props: {\n      episodes: data\n    },\n    revalidate: 60 * 60 * 8\n  };\n};","map":{"version":3,"sources":["/home/italo/√Årea de Trabalho/cursos/nlw#5/podcasternext/src/pages/index.tsx"],"names":["format","parseISO","ptBR","api","Home","props","JSON","stringify","episodes","getStaticProps","data","get","params","_limit","_sort","_order","map","episode","id","title","thumbnail","members","publishedAt","published_at","locale","duration","Number","file","description","revalidate"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAIA,SAASC,GAAT,QAAoB,aAApB;AAUA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAIC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,QAArB;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;AAED,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMP,GAAG,CAACQ,GAAJ,CAAQ,UAAR,EAAoB;AACzCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,KAAK,EAAE,cAFD;AAGNC,MAAAA,MAAM,EAAE;AAHF;AADiC,GAApB,CAAvB;AAQA,QAAMP,QAAQ,GAAGE,IAAI,CAACM,GAAL,CAAUC,OAAD,IAAa;AACrC,WAAO;AACLC,MAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELC,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAFV;AAGLC,MAAAA,SAAS,EAAEH,OAAO,CAACG,SAHd;AAILC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OAJZ;AAKLC,MAAAA,WAAW,EAAEtB,MAAM,CAACC,QAAQ,CAACgB,OAAO,CAACM,YAAT,CAAT,EAAiC,UAAjC,EAA6C;AAC9DC,QAAAA,MAAM,EAAEtB;AADsD,OAA7C,CALd;AAQLuB,MAAAA,QAAQ,EAAEC,MAAM,CAACT,OAAO,CAACU,IAAR,CAAaF,QAAd,CARX;AASLG,MAAAA,WAAW,EAAEX,OAAO,CAACW;AAThB,KAAP;AAWD,GAZgB,CAAjB,CATwD,CAsBxD;;AAEA,SAAO;AACLvB,IAAAA,KAAK,EAAE;AACLG,MAAAA,QAAQ,EAAEE;AADL,KADF;AAILmB,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU;AAJjB,GAAP;AAMD,CA9BM","sourcesContent":["import { format, parseISO } from \"date-fns\";\nimport ptBR from \"date-fns/locale/pt-BR\";\n\nimport { Header } from \"../components/Header\";\nimport { GetStaticProps } from \"next\";\nimport { api } from \"../services\";\ninterface Episode {\n  id: string;\n  title: string;\n  members: string;\n}\ninterface HomeProps {\n  episodes: Array<Episode>;\n}\n\nexport default function Home(props) {\n  return (\n    <div>\n      <h1>Index</h1>\n      <p>{JSON.stringify(props.episodes)}</p>\n    </div>\n  );\n}\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const { data } = await api.get(\"episodes\", {\n    params: {\n      _limit: 12,\n      _sort: \"published_at\",\n      _order: \"desc\",\n    },\n  });\n\n  const episodes = data.map((episode) => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      thumbnail: episode.thumbnail,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), \"d MMM yy\", {\n        locale: ptBR,\n      }),\n      duration: Number(episode.file.duration),\n      description: episode.description,\n    };\n  });\n  // const data = await response.json();\n\n  return {\n    props: {\n      episodes: data,\n    },\n    revalidate: 60 * 60 * 8,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}